{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stemmer"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#_1","title":"\u7b80\u4ecb","text":"<p>\u60a8\u73b0\u5728\u770b\u5230\u7684\u9875\u9762\u662f\u6211\u7684Github Pages\u9879\u76ee\u4e8e2024\u5e743\u67087\u65e5\u7ecf\u8fc7Mkdocs\u91cd\u6784\u4e4b\u540e\u751f\u6210\u7684\u3002</p> <p>Github Pages\u662fGithub\u652f\u6301\u7528\u6237\u81ea\u4e3b\u521b\u5efa\u9759\u6001\u7f51\u9875\u7684\u5de5\u5177\uff0c\u800cMkdocs\u5219\u662f\u7531Python\u8bed\u8a00\u7f16\u5199\u7684\uff0c\u6e32\u67d3Markdown\u6587\u4ef6\u7684\u6846\u67b6\uff1b\u501f\u6b64\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u65b9\u4fbf\u5730\u5f97\u5230\u4e00\u4e2a\u7f8e\u89c2\u7684\u7f51\u9875\uff0c\u800c\u7701\u53bb\u4e86\u5bf9Html\u539f\u59cb\u7f51\u9875\u7684\u624b\u52a8\u7f8e\u5316\u3002</p> <p>\u672c\u9879\u76ee\u521b\u5efa\u7684\u521d\u8877\u662f\u4f5c\u4e3a\u6211\u8bb0\u5f55\u90a3\u4e9b\u6211\u8ba4\u4e3a\u6709\u4ef7\u503c\u88ab\u8bb0\u8f7d\u4e0b\u6765\u7684\u4fe1\u606f\u7684\u201c\u5927\u6742\u70e9\u201d\uff0c\u4f7f\u7528html\u8bed\u8a00\u540cmarkdown+js\u63d2\u4ef6\u5171\u540c\u5236\u4f5c\u3002 \u5176\u540d\u201c\u5c0f\u62fe\u8c08\u8bb0\u201d\u5f88\u51c6\u786e\u5730\u53cd\u6620\u4e86\u6211\u7684\u76ee\u7684\u548c\u521d\u5fc3\uff1a\u5bf9\u8fc7\u53bb\u7ecf\u5386\u7684\u201c\u518d\u53d1\u73b0\u201d\u3002</p> <p>\u7531\u4e8e\u6211\u7684\u4e13\u4e1a\u4e3a\u8f6f\u4ef6\u5de5\u7a0b\uff0c\u6240\u4ee5\u8be5\u7f51\u7ad9\u7684\u5927\u90e8\u5206\u5185\u5bb9\u90fd\u662f\u8ba1\u7b97\u673a\u76f8\u5173\u7684\uff0c\u8fd9\u4e5f\u53cd\u6620\u4e86\u6211\u201c\u4e2a\u4eba\u535a\u5ba2\u201d\u7684\u79c1\u5fc3\uff1b\u7136\u800c\u6211\u5e76\u4e0d\u662f\u5341\u5206\u60f3\u8981\u671b\u773c\u6b32\u7a7f\u7684\u8ba1\u7b97\u673a\u6280\u672f\u6587\u7ae0\uff0c\u8fd9\u65e0\u7591\u662f\u6700\u5355\u8c03\u65e0\u804a\u7684\u4e8b\u60c5\u4e86\uff01 \u4e3a\u6b64\uff0c\u6211\u8ba1\u5212\u4e3a\u7f51\u7ad9\u914d\u5907\u5176\u4ed6\u8bb8\u591a\u6709\u8da3\u65b9\u9762\u7684\u77e5\u8bc6\uff1b\u8fd9\u4e9b\u5185\u5bb9\u7684\u65bd\u5de5\u8fdb\u5ea6\u5ba2\u89c2\u5730\u4ee3\u8868\u4e86\u6211\u7684\u503e\u5411\u3002</p>"},{"location":"#_2","title":"\u6ce8\u91ca","text":"<p>\u4e0b\u9762\u7684\u90e8\u5206\u662f\u5bf9\u7b80\u4ecb\u7684\u4e00\u70b9\u70b9\u8865\u5145\u548c\u6ce8\u89e3\uff1a</p>"},{"location":"#github-pages","title":"Github Pages","text":"<p>\u6211\u4e8e\u53bb\u5e74\u5e74\u5e95\u5f00\u59cb\u63a5\u89e6Github Pages\u3002\u6211\u4eec\u5b8c\u6210\u7684\u7f51\u7ad9\u9700\u8981\u90e8\u7f72\u5230\u670d\u52a1\u5668\u4e0a\uff1a\u5982\u679c\u4ee5\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u4f5c\u4e3a\u670d\u52a1\u5668\uff0c\u5219\u5173\u673a\u4e4b\u540e\u7f51\u7ad9\u5c31\u65e0\u6cd5\u8bbf\u95ee\uff0c\u5e76\u4e14\u4f1a\u628a\u81ea\u5df1\u4e3b\u673a\u7684IP\u5730\u5740\u66b4\u9732\u7ed9\u8bbf\u5ba2\uff1b \u5982\u679c\u79df\u7528\u963f\u91cc\u4e91\u7b49\u4e91\u670d\u52a1\u5668\uff0c\u90a3\u4e48\u5c31\u5fc5\u987b\u652f\u4ed8\u76f8\u5e94\u7684\u8d39\u7528\uff1b \u5982\u679c\u4f7f\u7528Github Pages\uff0c\u5219\u53ef\u4ee5\u514d\u8d39\u5730\u62e5\u6709\u81ea\u5df1\u7684\u9759\u6001\u7f51\u7ad9\uff0c\u540c\u65f6\uff0c\u7f3a\u70b9\u5c31\u662f\u6211\u4eec\u53ea\u80fd\u5f97\u5230\u4e00\u4e2a\u9759\u6001\u7f51\u9875\uff0c\u610f\u5473\u7740\u6211\u4eec\u4e0d\u80fd\u548c\u8bbf\u5ba2\u53d1\u751f\u65b9\u4fbf\u5730\u4ea4\u6d41\u3002</p> <p>\u8fd9\u662f\u4e0eGithub Pages\u76f8\u5173\u7684\u6587\u7ae0\uff1a\u5229\u7528 GitHub \u5feb\u901f\u642d\u5efa\u4e00\u4e2a\u514d\u8d39\u4e2a\u4eba\u7f51\u7ad9 | 2022\uff08\u65e0\u9700\u7f16\u7a0b\uff09 - \u502a\u741b\u7684\u6587\u7ae0 - \u77e5\u4e4e</p>"},{"location":"#material-for-mkdocs","title":"Material for Mkdocs","text":"<p>\u4ed6\u7684\u4f5c\u7528\u662f\u6210\u4e3a\u4e00\u4e2a\u201c\u7f51\u9875\u7684\u6a21\u677f\u201d\uff0c\u540c\u65f6\u907f\u514d\u4f60\u7f16\u5199Html\u4ee3\u7801\u8f6c\u800c\u4f7f\u7528\u66f4\u52a0\u7b80\u6d01\u6613\u7528\u7684Markdown\u8bed\u8a00\uff1a \u5bf9\u4e8e\u4e0d\u60f3\u8fc7\u5206\u5173\u6ce8\u4e8e\u7f51\u9875\u683c\u5f0f\u800c\u662f\u6587\u7ae0\u5185\u5bb9\u7684\u4f60\u65e0\u7591\u662f\u4e00\u4e2a\u5229\u5668\uff01</p> <p>\u8fd9\u662fMkdocs\u7684\u5b98\u7f51\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u9879\u76ee\u7684\u8be6\u7ec6\u4f7f\u7528\u6587\u6863\u3002</p> <p>\u540c\u65f6\uff0c\u6211\u8fd8\u5728\u5b66\u4e60\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u4e86\u4e00\u4e2a\u76f8\u5f53\u6210\u719f\u548c\u6709\u7528\u7684\u6559\u7a0b\uff1a\u5de5\u6b32\u5584\u5176\u4e8b\uff0c\u5fc5\u5148\u5229\u5176\u5668 - \u642d\u5efa\u6280\u672f\u535a\u5ba2/\u4e2a\u4eba\u4e3b\u9875 - \u4f7f\u7528MkDocs\u548cMaterial - Shaun\u7684\u6587\u7ae0 - \u77e5\u4e4e\uff0c\u4f5c\u8005\u642d\u5efa\u4e86\u4e00\u4e2a\u76f8\u5f53\u7f8e\u89c2\u7684\u7f51\u7ad9\uff0c\u6e90\u4ee3\u7801\u5728\u8fd9\u91cc</p> <p>\u6b64\u5916\uff0c\u8457\u540d\u7684\u4fe1\u7ade\u7ef4\u57faOI-Wiki\u4e5f\u4f7f\u7528\u4e86Mkdocs\u6280\u672f\uff0c\u8fd9\u662f\u9879\u76ee\u7f51\u5740\u548c\u6e90\u4ee3\u7801\u5730\u5740</p>"},{"location":"CS/","title":"Thread Pool Cpp","text":"<p>\u9879\u76ee\u6765\u6e90\uff1ahttps://github.com/progschj/ThreadPool</p> <p>\u9879\u76ee\u7b80\u4ecb\uff1a\u4e00\u4e2a\u5229\u7528c++11\u6807\u51c6\uff0c\u5168\u5e73\u53f0\u901a\u7528\u7684\u7ebf\u7a0b\u6c60\u7b80\u5355\u5b9e\u73b0</p> <p>\u4f7f\u7528\u65b9\u6cd5\uff1a\u4f5c\u8005\u5c06\u7ebf\u7a0b\u6c60\u5c01\u88c5\u4e3aThreadPool\u7c7b\uff0c\u5305\u542b\u4e8e\u5934\u6587\u4ef6\u4e2d\uff1b\u7531\u4e8e\u53ea\u662f\u7528c++11\u6807\u51c6\u5e93\u5185\u5bb9\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u94fe\u63a5\u4efb\u4f55\u7b2c\u4e09\u65b9\u5e93</p> <p>\u4e0b\u9762\u662f\u5bf9\u8be5\u9879\u76ee\u7684\u4e2a\u4eba\u6d45\u6790\uff1a</p>"},{"location":"CS/#_1","title":"\u7ebf\u7a0b\u6c60\u6700\u57fa\u672c\u7684\u5de5\u4f5c\u539f\u7406","text":"<p>\u672c\u9879\u76ee\u53ea\u5305\u542b\u6700\u7b80\u5355\u7684\u591a\u7ebf\u7a0b\u5e76\u53d1\uff0c\u4e0d\u6d89\u53ca\u5f02\u6b65\u8ba1\u65f6\u5668\u7b49\u5185\u5bb9</p> <p></p>"},{"location":"CS/#_2","title":"\u4ec0\u4e48\u662f\u591a\u7ebf\u7a0b","text":"<p>\u6211\u4eec\u77e5\u9053\uff0c\u5728\u6211\u4eec\u8fd0\u884cC/C++\u7a0b\u5e8f\uff08\u6216\u79f0\u4e3a\u4e00\u4e2a \u8fdb\u7a0b \uff09\u65f6\uff0c\u7a0b\u5e8f\u4e00\u884c\u4e00\u884c\u5730\u6267\u884c\u6211\u4eec\u5199\u4e0b\u7684\u4ee3\u7801\uff1b\u8fd9\u662f\u4e00\u79cd\u987a\u5e8f\u7ed3\u6784\uff0c\u6216\u8005\u8bf4\uff0c\u8fd9\u662f\u4e00\u79cd\u7ebf\u6027\u7ed3\u6784</p> <p>\u663e\u7136\uff0c\u8fd9\u6837\u7684\u7a0b\u5e8f\u610f\u5473\u7740\uff1a\u6211\u4eec\u5728\u540c\u4e00\u65f6\u523b\u53ea\u80fd\u8fd0\u884c\u4e00\u6761\u8bed\u53e5\uff1b\u4e0b\u4e00\u6761\u8bed\u53e5\u603b\u662f\u5728\u4e0a\u4e00\u6761\u8bed\u53e5\u7ed3\u675f\u4e4b\u540e\u624d\u80fd\u53d1\u751f</p> <p>\u6709\u65f6\u6211\u4eec\u53c8\u5e0c\u671b\u7a0b\u5e8f\u5728\u540c\u4e00\u65f6\u523b\u5b8c\u6210\u591a\u4e2a\u4efb\u52a1\u3002\u6bd4\u5982\u8bf4\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u9ad8\u6027\u80fd\u7684\u7f51\u7edc\u670d\u52a1\u5668\uff0c\u4ed6\u80af\u5b9a\u4e0d\u80fd\u4e00\u4e2a\u4e00\u4e2a\u5730\u5904\u7406\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\uff1a\u8fd9\u6837\u7b2c1M\u4e2a\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u8be5\u7b49\u5230\u7334\u5e74\u9a6c\u6708\u624d\u80fd\u88ab\u63a5\u6536\u3002\u3002\u3002</p> <p>\u9762\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u4e00\u4e2a\u6709\u6548\u7684\u89e3\u51b3\u65b9\u5f0f\u5c31\u662f\u5c06\u670d\u52a1\u5668\u8c03\u6574\u4e3a \u975e\u7ebf\u6027\u7ed3\u6784 \uff1b\u6216\u8005\u7b80\u5355\u4e00\u70b9\u8bf4\uff0c\u5c06\u670d\u52a1\u5668\u7a0b\u5e8f\u53d8\u6210 \u591a\u6761\u7ebf\u6027\u7684\u7ed3\u6784</p> <p></p> <p>\u5bf9\u4e8e\u591a\u6761\u7ebf\u6027\u7684\u7ed3\u6784\u7684\u7a0b\u5e8f\u2014\u2014\u591a\u7ebf\u7a0b\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u8c61\u6bcf\u4e00\u4e2a\u7ebf\u7a0b\u90fd\u6709\u5404\u81ea\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u4ed6\u4eec\u5171\u4eab\u540c\u6837\u7684\u6570\u636e\u4f46\u662f\u5404\u81ea\u540c\u65f6\u5bf9\u6570\u636e\u8fdb\u884c\u72ec\u81ea\u7684\u52a0\u5de5</p> <p>\u5bf9\u4e8eC++\u6765\u8bf4\uff0c\u7ebf\u7a0b\u5c31\u50cf\u662f\u4e00\u6761\u751f\u4ea7\u7ebf\uff1a\u5f53\u6211\u4eec\u914d\u7f6e\u597d\u751f\u4ea7\u7ebf\u7684\u8bbe\u5907\uff0c\u786e\u5b9a\u597d\u751f\u4ea7\u7ebf\u7684\u4efb\u52a1\uff0c\u5e76\u63d0\u4f9b\u7ed9\u8fd9\u6761\u751f\u4ea7\u7ebf\u4ed6\u6240\u9700\u8981\u7684\u539f\u6750\u6599\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u8ba9\u4ed6\u5f00\u59cb\u5de5\u4f5c\u4e86\uff01</p> <p><code>std::thread t(Fn&amp;&amp; fn, Args... args)</code>\u8fd9\u6761\u8bed\u53e5\u5c31\u521b\u5efa\u4e86\u4e00\u4e2a\u7ebf\u7a0b\u7684\u5b9e\u4f8bt\uff1a \u4ed6\u4ee5\u53c2\u6570fn\u4e3a\u8bbe\u5907\uff08\u4efb\u52a1\uff09\uff0c\u4ee5\uff08\u53ef\u53d8\uff09\u53c2\u6570args\u4e3a\u539f\u6750\u6599\uff0c\u751f\u4ea7\u51fa\u4e3b\u7ebf\u7a0b\u60f3\u8981\u7684\u201c\u4ea7\u54c1\u201d</p>"},{"location":"CS/#_3","title":"\u4e3a\u4ec0\u4e48\u9700\u8981\u7ebf\u7a0b\u6c60","text":"<p>\u6309\u7167\u6211\u4eec\u4e4b\u524d\u7684\u601d\u8def\uff0c\u53ea\u8981\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u9700\u8981\u5e76\u884c\u5904\u7406\u7684\u4efb\u52a1\uff0c\u90fd\u4e3a\u4ed6\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u53bb\u5904\u7406\u4e0d\u5c31\u597d\u4e86\u5417\uff1f\u4e3a\u4ec0\u4e48\u975e\u5f97\u8981\u628a\u51e0\u4e2a\u7ebf\u7a0b\u653e\u5230\u4e00\u8d77\u5904\u7406\u6240\u6709\u7684\u8bf7\u6c42\u5462\uff1f</p> <p>\u9996\u5148\uff0c\u521b\u5efa\u548c\u9500\u6bc1\u7ebf\u7a0b\u7684\u5b9e\u4f8b\u9700\u8981\u8017\u8d39\u5927\u91cf\u7684CPU\u65f6\u95f4</p> <p>\u8bd5\u60f3\u4e00\u4e0b\uff0c\u5018\u4f7f\u6211\u4eec\u7a0b\u5e8f\u7684\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u653e\u5728\u4e86\u521b\u5efa\u548c\u9500\u6bc1\u7ebf\u7a0b\u7684\u4e8b\u60c5\u4e0a\uff0c\u90a3\u4e48\u8fd8\u4f1a\u6709\u4ec0\u4e48\u65f6\u95f4\u529e\u6b63\u4e8b\u5462\uff1f</p> <p>\u540c\u65f6\uff0c\u5f53\u7ebf\u7a0b\u8fc7\u591a\u65f6\uff0cCPU\u5728\u4e0d\u540c\u7ebf\u7a0b\u4e4b\u95f4\u6765\u56de\u5207\u6362\u7684\u65f6\u95f4\u4e5f\u5c31\u4e0d\u53ef\u5ffd\u7565\u4e86\uff1b\u8fd9\u540c\u6837\u9020\u6210\u4e86\u8d44\u6e90\u7684\u6d6a\u8d39</p> <p>\u5176\u6b21\uff0c\u7ebf\u7a0b\u6c60\u6709\u5229\u4e8e\u66f4\u597d\u5730\u8fdb\u884c\u4efb\u52a1\u8c03\u5ea6</p> <p>\u4ec0\u4e48\u662f\u4efb\u52a1\u8c03\u5ea6\u5462\uff1f\u6211\u4eec\u6d45\u663e\u7406\u89e3\u4e00\u4e0b\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u9700\u8981\u5e76\u884c\u5904\u7406\u7684\u4efb\u52a1\uff0c\u53ef\u80fd\u4f1a\u6709 \u4f18\u5148\u7ea7 \u7684\u533a\u522b\uff1b\u6211\u4eec\u5f53\u7136\u9700\u8981\u4f18\u5148\u5904\u7406\u4f18\u5148\u7ea7\u66f4\u9ad8\u7684\u4efb\u52a1\u3002\u8fd9\u79cd\u9700\u6c42\u7ebf\u7a0b\u6c60\u5c31\u53ef\u4ee5\u8f7b\u677e\u529e\u5230</p> <p>\u8fd8\u6709\uff0c\u7ebf\u7a0b\u6c60\u53ef\u4ee5\u8ba9\u4f60\u7684\u7a0b\u5e8f\u5177\u6709\u826f\u597d\u7684\u9c81\u68d2\u6027</p> <p>\u901a\u8fc7\u5c01\u88c5\u7ebf\u7a0b\u6c60\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u51faRAII\u7684\u4ee3\u7801\uff0c\u4ece\u800c\u51cf\u5c11\u51fa\u73b0 \u521b\u5efa\u4e86\u7ebf\u7a0b\u5374\u6ca1\u6709\u9500\u6bc1\u7684\u5185\u5b58\u6cc4\u9732 \u95ee\u9898</p> <p>\u5355\u6311\u4ee5\u4e0a\u4efb\u4f55\u4e00\u70b9\uff0c\u90fd\u8db3\u4ee5\u6210\u4e3a\u6211\u4eec\u5b66\u4e60\u7ebf\u7a0b\u6c60\u7684\u52a8\u673a</p> <p>\u65e2\u7136\u5982\u6b64\uff0c\u8ba9\u6211\u4eec\u5f00\u59cb\u5b66\u4e60C++\u7684\u7ebf\u7a0b\u6c60\u5427\uff01</p>"},{"location":"CS/#_4","title":"\u7ebf\u7a0b\u6c60\u7684\u7b80\u5355\u5b9e\u73b0","text":"<p>\u5f00\u6e90\u9879\u76ee https://github.com/progschj/ThreadPool \u5229\u7528C++11\u5199\u51fa\u4e86\u4e00\u4e2a\u7cbe\u5de7\u6613\u61c2\u7684\u7ebf\u7a0b\u6c60\u5b9e\u73b0\uff0c\u5e76\u5177\u6709\u826f\u597d\u7684\u6269\u5c55\u6027\uff0c\u6210\u4e3a\u6211\u4eec\u5b66\u4e60\u7684\u57fa\u7840</p> <p>\u6e90\u7801\u5982\u4e0b\uff08thread_pool.h\uff09\uff1a</p> <pre><code>#ifndef THREAD_POOL_H\n#define THREAD_POOL_H\n\n#include &lt;condition_variable&gt;\n#include &lt;functional&gt;\n#include &lt;future&gt;\n#include &lt;memory&gt;\n#include &lt;mutex&gt;\n#include &lt;queue&gt;\n#include &lt;stdexcept&gt;\n#include &lt;thread&gt;\n#include &lt;vector&gt;\n</code></pre> <p>\u8fd9\u662f\u5f15\u7528\u7684\u5934\u6587\u4ef6\uff0c\u5176\u4e2dcondition_variable\uff08\u6761\u4ef6\u53d8\u91cf\uff09\u3001future\uff08\u5f02\u6b65\u5730\u83b7\u53d6\u8fd0\u884c\u7ed3\u679c\uff09\u3001mutex\uff08\u4e3a\u4e86\u8bbf\u95ee\u5171\u4eab\u5185\u5b58\u800c\u8bbe\u7f6e\u7684\u9501\ud83d\udd12\uff09\u3001thread\uff08\u5305\u542b\u7ebf\u7a0b\u7c7b\u7684\u6587\u4ef6\uff09</p> <pre><code>class ThreadPool {\npublic:\n  ThreadPool(size_t);\n  template &lt;class F, class... Args&gt;\n  auto enqueue(F &amp;&amp;f, Args &amp;&amp;...args)\n      -&gt; std::future&lt;typename std::result_of&lt;F(Args...)&gt;::type&gt;;\n  ~ThreadPool();\n\nprivate:\n  // need to keep track of threads so we can join them\n  std::vector&lt;std::thread&gt; workers;\n  // the task queue\n  std::queue&lt;std::function&lt;void()&gt;&gt; tasks;\n\n  // synchronization\n  std::mutex queue_mutex;\n  std::condition_variable condition;\n  bool stop;\n};\n</code></pre> <p>\u8fd9\u91cc\u5b9a\u4e49\u4e86\u7ebf\u7a0b\u6c60\u7684\u7ed3\u6784\uff1a\u5b83\u62e5\u6709 \u4e00\u7ec4\u7ebf\u7a0b \uff0c\u4e00\u4e2a \u4efb\u52a1\u961f\u5217 \uff0c\u4e00\u4e2a \u4e92\u65a5\u9501 \uff0c\u4e00\u4e2a\u201c\u5524\u9192\u7ebf\u7a0b\u201d\u7684 \u6761\u4ef6\u53d8\u91cf \u548c\u6761\u4ef62</p> <pre><code>// the constructor just launches some amount of workers\ninline ThreadPool::ThreadPool(size_t threads) : stop(false) {\n  for (size_t i = 0; i &lt; threads; ++i)\n    workers.emplace_back([this] {\n      for (;;) {\n        std::function&lt;void()&gt; task;\n\n        {\n          std::unique_lock&lt;std::mutex&gt; lock(this-&gt;queue_mutex);\n          this-&gt;condition.wait(\n              lock, [this] { return this-&gt;stop || !this-&gt;tasks.empty(); });\n          if (this-&gt;stop &amp;&amp; this-&gt;tasks.empty())\n            return;\n          task = std::move(this-&gt;tasks.front());\n          this-&gt;tasks.pop();\n        }\n\n        task();\n      }\n    });\n}\n</code></pre> <p>\u8fd9\u662f\u7ebf\u7a0b\u6c60\u7684\u6784\u9020\u51fd\u6570\uff0c\u8c03\u7528\u5b83\u6211\u4eec\u5c31\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u6c60\u7684\u5b9e\u4f8b</p> <p>\u901a\u8fc7\u4f20\u5165\u7684\u53c2\u6570threads\uff0c\u6211\u4eec\u53ef\u4ee5\u9650\u5236\u7ebf\u7a0b\u7684\u603b\u6570\uff1b\u5728\u4e92\u65a5\u9501\u7684\u4fdd\u62a4\u4e0b\uff0c\u67d0\u6761\u7ebf\u7a0b\u4ece\u4efb\u52a1\u961f\u5217\u4e2d\u53d6\u51fa\u4efb\u52a1\uff0c\u5e76\u6267\u884c\u4e4b</p> <pre><code>// add new work item to the pool\ntemplate &lt;class F, class... Args&gt;\nauto ThreadPool::enqueue(F &amp;&amp;f, Args &amp;&amp;...args)\n    -&gt; std::future&lt;typename std::result_of&lt;F(Args...)&gt;::type&gt; {\n  using return_type = typename std::result_of&lt;F(Args...)&gt;::type;\n\n  auto task = std::make_shared&lt;std::packaged_task&lt;return_type()&gt;&gt;(\n      std::bind(std::forward&lt;F&gt;(f), std::forward&lt;Args&gt;(args)...));\n\n  std::future&lt;return_type&gt; res = task-&gt;get_future();\n  {\n    std::unique_lock&lt;std::mutex&gt; lock(queue_mutex);\n\n    // don't allow enqueueing after stopping the pool\n    if (stop)\n      throw std::runtime_error(\"enqueue on stopped ThreadPool\");\n\n    tasks.emplace([task]() { (*task)(); });\n  }\n  condition.notify_one();\n  return res;\n}\n</code></pre> <p>\u8fd9\u6bb5\u4ee3\u7801\u5c55\u793a\u4e86\u5982\u4f55\u5411\u7ebf\u7a0b\u6c60\u7684\u4efb\u52a1\u961f\u5217\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u4efb\u52a1\uff1a\u901a\u8fc7std::packaged_task\u3001std::future\u3001std::forward\u7b49\u6666\u6da9\u7684\u8bed\u6cd5\uff0c\u5c06\u4efb\u52a1\u5bf9\u8c61\u653e\u5230\u961f\u5217\u4e2d\u7b49\u5f85\u6267\u884c\uff1b\u5e76\u901a\u8fc7\u6761\u4ef6\u53d8\u91cf\u901a\u77e5\u5176\u4ed6\u7ebf\u7a0b\u201c\u6709\u4efb\u52a1\u6765\u4e86\uff01\uff01\uff01\u201d</p> <p>\u6b64\u65f6\uff0c\u5176\u4ed6\u7ebf\u7a0b\u7ec8\u4e8e\u7ed3\u675f\u4e86\u7b49\u5f85\uff08condition.wait\u65b9\u6cd5\uff09\uff0c\u5f00\u59cb\u5de5\u4f5c</p> <pre><code>// the destructor joins all threads\ninline ThreadPool::~ThreadPool() {\n  {\n    std::unique_lock&lt;std::mutex&gt; lock(queue_mutex);\n    stop = true;\n  }\n  condition.notify_all();\n  for (std::thread &amp;worker : workers)\n    worker.join();\n}\n\n#endif\n</code></pre> <p>\u7ebf\u7a0b\u6c60\u7684\u9500\u6bc1\u8fc7\u7a0b\uff1a\u4f9d\u636eRAII\u601d\u60f3\uff0cResource Acquisition Is Initialization\uff0c\u5f53\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u7ed3\u675f\u540e\u81ea\u52a8\u9500\u6bc1\u8be5\u5bf9\u8c61\u7684\u5185\u5b58\u7a7a\u95f4</p> <p>\u4f53\u73b0\u5728\u8fd9\u91cc\u5c31\u662f\u5c06\u6240\u6709\u5b50\u7ebf\u7a0bjoin\u8fdb\u4e3b\u7ebf\u7a0b</p> <p>\u81f3\u6b64\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u6c60\u7684\u57fa\u672c\u529f\u80fd\u5c31\u5168\u90e8\u5b8c\u6210\u4e86</p>"},{"location":"CS/#_5","title":"\u5982\u4f55\u4f7f\u7528","text":"<p>\u9879\u76ee\u4e2d\u9644\u8d60\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u4ee3\u7801\uff0c\u5e2e\u52a9\u4eba\u4eec\u4f7f\u7528\u7ebf\u7a0b\u6c60</p> <pre><code>#include &lt;chrono&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\n#include \"thread_pool.h\"\n\nint main() {\n\n  ThreadPool pool(4);\n  std::vector&lt;std::future&lt;int&gt;&gt; results;\n\n  for (int i = 0; i &lt; 8; ++i) {\n    results.emplace_back(pool.enqueue([i] {\n      std::cout &lt;&lt; \"hello \" &lt;&lt; i &lt;&lt; std::endl;\n      std::this_thread::sleep_for(std::chrono::seconds(1));\n      std::cout &lt;&lt; \"world \" &lt;&lt; i &lt;&lt; std::endl;\n      return i * i;\n    }));\n  }\n\n  for (auto &amp;&amp;result : results)\n    std::cout &lt;&lt; result.get() &lt;&lt; ' ';\n  std::cout &lt;&lt; std::endl;\n\n  return 0;\n}\n</code></pre> <p>\u5728\u8fd9\u4efd\u793a\u4f8b\u4ee3\u7801\u4e2d\uff0c\u4f5c\u8005\u521b\u5efa\u4e86\u4e00\u4e2a\u62e5\u6709\u56db\u4e2a\u7ebf\u7a0b\u7684\u7ebf\u7a0b\u6c60\uff0c\u5e76\u4e14\u5411\u4efb\u52a1\u961f\u5217\u4e2d\u62e2\u5171\u653e\u4e868\u4e2a\u4efb\u52a1</p>"},{"location":"CS/#_6","title":"\u540e\u8bb0","text":"<ul> <li>\u6211\u4eec\u5206\u914d\u591a\u5c11\u7ebf\u7a0b\u6700\u5408\u9002\uff1f\u4e00\u822c\u6765\u8bf4\uff0c\u4e3a\u4e86\u5145\u5206\u5229\u7528CPU\u7684\u5e76\u53d1\u80fd\u529b\uff0c\u6211\u4eec\u7ebf\u7a0b\u6570\u5e94\u8be5\u548cCPU\u6838\u6570\u76f8\u5f53\uff1b\u8fd9\u6837\u6bcf\u4e2aCPU\u6838\u53ef\u4ee5\u5355\u72ec\u5904\u7406\u4e00\u4ef6\u4efb\u52a1\u3002\uff08\u7535\u8111\u914d\u7f6e\u8bf4\u7684\u51e0\u6838\u51e0\u7ebf\u7a0b\u5230\u5e95\u662f\u4ec0\u4e48\u610f\u601d\uff1f\u8c22\u8c22? - \u77e5\u4e4e\uff09</li> <li>\u5982\u4f55\u63a7\u5236\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\uff1f\u901a\u8fc7\u9605\u8bfb\u4ee3\u7801\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u6211\u4eec\u4f7f\u7528\u961f\u5217\u6765\u5b58\u50a8\u6240\u6709\u4efb\u52a1\uff1b\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4eba\u7269\u7684\u4f18\u5148\u7ea7\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u4f7f\u7528\u4f18\u5148\u961f\u5217\u6765\u8fdb\u884c\u4f18\u5316\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8bb8\u591a\u7b97\u6cd5\u53ef\u4ee5\u901a\u8fc7\u4f18\u5148\u961f\u5217\u8fdb\u884c\u4f18\u5316</li> <li>\u4e92\u65a5\u91cf\uff08mutex\uff09\u662f\u4ec0\u4e48\uff1f\u9996\u5148\u6211\u4eec\u77e5\u9053\uff0c\u6240\u6709\u7ebf\u7a0b\u5171\u4eab\u8fdb\u7a0b\u4e2d\u7684\u6570\u636e\uff0c\u56e0\u6b64\u5728\u5e76\u884c\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u80fd\u51fa\u73b0\u4e24\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8bbf\u95ee\u540c\u4e00\u4e2a\u5185\u5b58\u5730\u5740\uff1b\u82e5\u4e24\u4e2a\u5185\u5b58\u90fd\u53ea\u8fdb\u884c\u8bfb\u64cd\u4f5c\u8fd8\u597d\uff0c\u53ef\u5f53\u67d0\u4e2a\u7ebf\u7a0b\u8fdb\u884c\u5199\u64cd\u4f5c\u65f6\uff0c\u65e0\u7591\u5f71\u54cd\u4e86\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u7684\u7ed3\u679c\u3002\u901a\u8fc7\u52a0\u9501\uff0c\u6211\u4eec\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e2a\u65f6\u523b\u81f3\u591a\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5bf9\u6570\u636e\u8fdb\u884c\u64cd\u4f5c</li> </ul>"},{"location":"GroupTheory/group_theory_pt1/","title":"Notations in Group Theory","text":""},{"location":"GroupTheory/group_theory_pt1/#notation","title":"NOTATION","text":"<p>We use standard Bourbaki notations:</p> <p>\\(\\mathbb{N}=\\{0,1,2,\\ldots\\}\\)</p> <p>\\(\\mathbb{Q}\\) is the field of rational numbers</p> <p>\\(\\mathbb{R}\\) is the field of real numbers</p> <p>\\(\\mathbb{C}\\) is the field of complex numbers</p> <p>\\(\\mathbb{F}_q\\) is a finite field with \\(q\\) elements where \\(q\\) is a power of a prime number</p> <p>In particular, \\(\\mathbb{F}_p=\\mathbb{Z}/p\\mathbb{Z}\\) for \\(p\\) a prime number</p> <p>For integers \\(m\\) and \\(n\\), \\(m{\\mid}n\\) means that \\(m\\) divides \\(n\\), i.e., \\(n \\in m\\mathbb{Z}\\)</p> <p>\\(X\\approx Y\\) \\(X\\) is isomorphism to \\(Y\\)</p> <p>\\(X\\simeq Y\\) \\(X\\) and \\(Y\\) are canonically isomorphic (or there is a given or unique isomorphism)</p>"},{"location":"NumberTheory/primary_number_theory_pt1/","title":"Mathematical Methods","text":""},{"location":"NumberTheory/primary_number_theory_pt1/#the-well-ordering-principle-and-mathematical-induction","title":"The Well Ordering Principle and Mathematical Induction","text":""},{"location":"NumberTheory/primary_number_theory_pt1/#the-well-ordering-principle","title":"The Well Ordering Principle","text":"<p>The Well Ordering Principle A least element exist in any non empty set of positive integers.</p> <p>The Pigeonhole Principle If \\(s\\) objects are placed in \\(k\\) boxes for \\(s&gt;k\\), then at least one box contains more than one object.</p> <p>Proof Suppose that none of the boxes contains more than one object. Then there are at most \\(k\\) objects. This leads to a contradiction with the fact that there are \\(s\\) objects for \\(s&gt;k\\).</p>"},{"location":"NumberTheory/primary_number_theory_pt1/#mathematical-induction","title":"Mathematical Induction","text":"<p>Theorem 1. The First Principle of Mathematical Induction If a set of positive integers has the property that, if it contains the integer \\(k\\), then it also contains \\(k+1\\), and if this set contains \\(1\\) then it must be the set of all positive integers \\(\\mathbb{N}^+\\).</p> <p>Proof Let \\(S\\) be the set of positive integers containing the integer \\(1\\), and the integer \\(k+1\\) whenever it contains \\(k\\). Assume also that \\(S\\) is not the set of all positive integers. As a result, there are some integers that are not contained in \\(S\\) and thus those integers must have a least element \\(\\alpha\\). Notice that \\(\\alpha \\neq 1\\) since \\(1 \\in S\\). But \\(\\alpha-1 \\in S\\) thus leading to \\(\\alpha \\in S\\). Thus \\(S\\) must contains all positive integers.</p> <p>Example Use mathematical induction to prove that \\(n! \\leq n^n\\) for all positive integers n.</p> <p>Proof Note that \\(1! \\leq 1^1\\). We now suppose that</p> \\[ n! \\leq n^n \\] <p>for some \\(n\\), we prove that \\((n+1)! \\leq (n+1)^{n+1}\\). Note that</p> \\[ (n+1)! = (n+1)n! \\leq (n+1)n^n \\leq (n+1)(n+1)^n = (n+1)^{n+1} \\] <p>Theorem 2. The Second Principle of Mathematical Induction A set of positive integers that has the property that for every integer \\(k\\), if it contains all the integers \\(1\\) through \\(k\\) then it contains \\(k+1\\) and if it contains \\(1\\) then it must be \\(\\mathbb{N}^+\\).</p>"},{"location":"NumberTheory/primary_number_theory_pt2/","title":"Start with Division","text":""},{"location":"NumberTheory/primary_number_theory_pt2/#divisibility-and-the-division-algorithm","title":"Divisibility and the Division Algorithm","text":"<p>Def 1 If \\(a\\) and \\(b\\) are integers s.t. \\(a \\neq 0\\), then we say \"\\(a\\) divides \\(b\\)\" if there exists an integer \\(k\\) s.t. \\(b=ka\\), denoted \\(a \\mid b\\).</p> <p>Example 3</p> <p>a. \\(2 \\mid n\\) if \\(n\\) is even, \\(2 \\nmid n\\) if \\(n\\) is odd.</p> <p>b. \\(\\forall a \\in \\mathbb{Z}\\) one has that \\(a \\nmid 0\\).</p> <p>c. If \\(b \\in \\mathbb{Z}\\) and \\(|b|&lt;a\\), and \\(b \\neq 0\\), then \\(a \\nmid b\\).</p> <p>Thm 3 If \\(a\\), $b and \\(c\\) are integers s.t. \\(a \\mid b\\) and \\(b \\mid c\\), then \\(a \\mid c\\).</p> <p>Thm 4 If \\(c \\mid a\\) and \\(c \\mid b\\), then \\(c \\mid (ma+nb)\\) for all \\(m, n \\in \\mathbb{Z}\\).</p> <p>Corollary If \\(a \\mid b_1, a \\mid b_2, ..., a \\mid b_n\\), then</p> \\[ a \\mid \\sum_{j=1}^{n}k_jb_j. \\]"},{"location":"NumberTheory/primary_number_theory_pt2/#division-algorithm","title":"Division Algorithm","text":"<p>Thm 5. The Division Algorithm If \\(a\\) and \\(b\\) are integers s.t. \\(b&gt;0\\), then there exist unique integers \\(q\\) and \\(r\\) s.t. \\(a=bq+r\\) where \\(0 \\leq r &lt; b\\).</p> <p>Proof (Existence) Consider the set \\(A=\\{a-bk | a-bk \\geq 0 \\wedge k \\in \\mathbb{Z}\\}\\). Note that \\(A\\) is not empty since for \\(k&lt;a/b, a-bk \\in A\\). Thus there exists a least element \\(r=a-bq \\in A\\) for some \\(q\\) by the Well Order Principle. Notice that \\(r \\geq 0\\) by construction and if \\(r \\geq b\\), then</p> \\[ s=r-b=a-b(q+1) \\geq 0 \\] <p>is smaller than \\(r\\), implying that \\(r\\) is not the least element in \\(A\\). As a result we have \\(0 \\leq r &lt; b\\).</p> <p>(Uniqueness) Suppose \\(a=bq_1+r_1\\) and \\(a=bq_2+r_2\\) and \\(q_1&gt;q_2, r_1&lt;r_2\\), then</p> \\[ r_2-r_1=(a-bq_2)-(a-bq_1)=(q_1-q_2)b \\geq b \\] <p>Since \\(0 \\leq r_1 &lt; b\\), we get \\(r_2 \\geq b\\) which is incorrect. Thus \\(q\\) and \\(r\\) are unique.</p> <p>Exercises</p> <ol> <li> <p>For nonzero integers \\(a, c\\) and integers \\(b, d\\), s.t. \\(a \\mid b\\) and \\(c \\mid d\\), then \\(ac \\mid bd\\).</p> </li> <li> <p>If \\(a\\) and \\(b\\) are positive integers and \\(a \\mid b\\), then \\(a \\leq b\\).</p> </li> <li> <p>If \\(ac \\mid bc\\), then \\(a \\mid b\\).</p> </li> <li> <p>If \\(a \\mid b\\) and \\(b \\mid a\\), then \\(a=\\pm b\\).</p> </li> </ol>"},{"location":"NumberTheory/primary_number_theory_pt2/#exercises","title":"Exercises","text":""},{"location":"NumberTheory/primary_number_theory_pt2/#representations-of-integers-in-different-bases","title":"Representations of Integers in Different Bases","text":"<p>Notation An integer \\(a\\) written in base \\(b\\) expansion is denoted by \\((a)_b\\).</p> <p>Thm 6 Let \\(b\\) be a positive integer with \\(b&gt;1\\). Then any positive integer \\(m\\) can be written uniquely as</p> \\[ m=a_lb^l+a_{l-1}b^{l-1}+...+a_1b+a_0 \\] <p>where \\(l\\) is a positive integer, \\(0 \\leq a&lt;b\\) for \\(j =0,1,...,l\\) and \\(a_l \\neq 0\\).</p> <p>Proof (Existence) First of all, we have</p> \\[ 1=0 \\times b+1 \\] <p>Suppose we have</p> \\[ m=\\sum_{j=0}^{l}a_jb^j \\] <p>then we have</p> \\[ m+1=(\\sum_{j=0}^{l}a_jb^j)+1 \\] <p>If</p> \\[ a_0+1&lt;b \\] <p>Thus the proof finishes; otherwise let \\(a'_0=0\\) and \\(a'_1=a_1+1\\).</p> <p>So we can repeat this process iteratively. Since the process is finite so it ends at some time.</p> <p>(Uniqueness) Suppose</p> \\[ m=\\sum_{j=0}^{k}c_jb^j \\] <p>where \\(k&gt;=l\\). Assume \\(a_j=0\\) for all \\(l&lt;j \\leq k\\).</p> <p>Using The Division Algorithm, \\(m\\) can be uniquely divided to \\(m=qb+r\\) s.t. \\(a_0=c_0\\). More again, let \\(n=(m-a_0)/b\\), we get \\(a_1=c_1\\). At last, we get \\(a_j=c_j\\) for any \\(j \\leq k\\).</p>"},{"location":"NumberTheory/primary_number_theory_pt3/","title":"About Divisors And The Euclidean Algorithm","text":""},{"location":"NumberTheory/primary_number_theory_pt3/#the-greatest-common-divisor","title":"The Greatest Common Divisor","text":"<p>Def 2 The greatest common divisor of two integers \\(a\\) and \\(b\\) is the greatest integer that divides both \\(a\\) and \\(b\\).</p> <p>We denote the greatest common divisor of two integers \\(a\\) and \\(b\\) by \\((a,b)\\). We also define \\((0,0)=0\\).</p> <p>Def 3 Two integers \\(a\\) and \\(b\\) are relatively prime if \\((a,b)=1\\).</p> <p>Thm 7 If \\((a,b)=d\\) then \\((a/d,b/d)=1\\).</p> <p>Proof Suppose \\((a/d,b/d)=c\\) then</p> \\[ a/d=k_1c \\] \\[ b/d=k_2c \\] \\[ a=k_1cd \\] \\[ b=k_2cd \\] <p>for some integers \\(k_1\\) and \\(k_2\\) where \\((k_1,k_2)=1\\). So we have \\((a,b)=cd\\) thus \\(c=1\\).</p> <p>Thm 8 Let \\(a, b\\) and \\(c\\) be integers. Then \\((a,b)=(a+cb,b)\\).</p> <p>Proof Suppose \\((a,b)=d\\) then \\(d \\mid a\\) and \\(d \\mid b\\). Thus \\(d \\mid a+cb\\). If \\((a+cb,b)=d' \\neq d\\) i.e., \\(d\\) is not the greatest common divisor of \\(a+cb\\) and \\(b\\), which implies</p> \\[ d' \\mid (a+cb) \\] \\[ d' \\mid b \\] <p>So \\(b=kd'\\) for some integer \\(k\\) and \\(a=(k-ck)d'\\) thus \\(d' \\mid a\\). However, since \\(d\\) is the greatest common divisor of \\(a\\) and \\(b\\) thus \\(d&gt;d'\\), which leads to contradiction. So \\((a+cb,b)=d\\) and \\((a,b)=(a+cb,b)\\).</p> <p>Eg 10 Notice that \\((4,14)=(4,14-3 \\cdot 4)=(4,2)=2\\).</p> <p>Thm 9 The greatest common divisor fo two integers \\(a\\) and \\(b\\), not both \\(0\\) is the least positive integer s.t. \\(ma+nb=d\\) for some integers \\(m\\) and \\(n\\).</p> <p>Proof Assume \\(a, b\\) are positive integers. Consider the set of all positive linear combination of \\(a\\) and \\(b\\), denoted by \\(A=\\{ma+nb | m,n \\in \\mathbb{N}\\}\\). Now \\(A\\) is not empty since \\(a=1 \\cdot a+0 \\cdot b\\) and \\(b=0 \\cdot a+ 1 \\cdot b\\) are in \\(A\\). By the well-ordering principle, there exists a least element \\(d=ma+nb\\) in \\(A\\). Now we need to prove that \\(d\\) is the greatest common divisor of \\(a\\) and \\(b\\). By the division algorithm, we have</p> \\[ a=qd+r, 0 \\leq r&lt;d \\] <p>Thus</p> \\[ r=a-qd=(1-qm)a-qnb \\] <p>So \\(r\\) is a positive linear combination of \\(a\\) and \\(b\\) or \\(r=0\\). The former case is incorrect. Hence \\(d \\mid a\\). Similarly, \\(d \\mid b\\). For any integer \\(c\\) satisfying \\(c \\mid a\\) and \\(c \\mid b\\) we get \\(c \\mid (ma+nb)\\) and \\(c \\mid d\\). Hence \\(d\\) is the greatest common divisor of \\(a\\) and \\(b\\).</p> <p>Corollary If \\(a\\) and \\(b\\) are relatively prime then there exist integers \\(m\\) and \\(n\\) s.t. \\(ma+nb=1\\).</p> <p>Def 4 Let \\(a_1,a_2,...,a_n\\) be integers, not all \\(0\\). The greatest common divisor of these integers is the largest integer that divides all of the integers in the set. The greatest common divisor of \\(a_1,a_2,...,a_n\\) is denoted by \\((a_1,a_2,...,a_n)\\).</p> <p>Def 5 The integers \\(a_1,...,a_n\\) re said to be mutually relatively prime if \\((a_1,...,a_n)=1\\).</p> <p>Def 6 The integers \\(a_1,...,a_n\\) re said to be pairwise relatively prime if for each \\(i \\neq j\\), we have \\((a_i,a_j)=1\\).</p>"},{"location":"NumberTheory/primary_number_theory_pt3/#exercises","title":"Exercises","text":"<p>Exercises</p> <ul> <li> <p>Let \\(m\\) be a positive integer. Find the greatest common divisor of \\(m\\) and \\(m+1\\).</p> </li> <li> <p>Let \\(m\\) be a positive integer, find the greatest common divisor of \\(m\\) and \\(m + 2\\).</p> </li> </ul> <p>Hint: Odd and Even.</p> <ul> <li>Show that if \\(m\\) and \\(n\\) are integers such that \\((m, n) = 1\\), then \\((m+n,m-n)=1\\) or \\(2\\).</li> </ul> <p>Proof First of all, we prove that if \\((m,n)=1\\) then \\((2m,2n)=2\\).</p> <p>It is easy to see that \\(2\\) is a common divisor of \\(2m\\) and \\(2n\\). Since \\((m,n)=1\\), there exist two integers \\(x\\) and \\(y\\) s.t. \\(xm+yn=1\\) and so \\(x(2m)+y(2n)=2\\) thus \\(2\\) is the greatest common divisor of \\(2m\\) and \\(2n\\) according to Thm 9.</p> <p>Suppose \\((m+n,m-n)=d\\). By Thm 8,</p> \\[ (m+n,m-n)=(m+n,m-n+1 \\cdot (m+n))=(m+n,2m) \\] <p>and</p> \\[ (m+n,m-n)=(m+n,m-n-1 \\cdot (m+n))=(m+n,-2n)=(m+n,2n) \\] <p>Thus \\(d \\mid 2m\\) and \\(d \\mid 2n\\). \\(d \\leq 2\\).</p> <p>If \\(m+n\\) is an even number, \\(2 \\mid (m+n)\\) and \\(2 \\mid 2m\\) so \\(2 \\leq d\\) and \\(d=2\\).</p> <p>If \\(m+n\\) is an odd number, \\(2 \\nmid (m+n)\\) thus \\(d=1\\).</p> <ul> <li>Show that if \\(a_1, a_2, ..., a_n\\) are integers that are not all \\(0\\) and \\(c\\) is a positive integer, then \\((ca_1, ca_2, ..., ca_n) = c(a_1, a_2, ..., a_n)\\).</li> </ul> <p>Proof Suppose \\((a_1,...,a_n)=d\\) and \\((ca_1,...,ca_n)=d'\\). It is easy to verify that \\(cd \\leq d'\\). Now we prove that \\(d' \\leq cd\\).</p> <p>Lemma \\(d \\mid ca\\) iff \\(d \\mid c\\) or \\(d \\mid a\\). The proposition is equivalent to \\(d \\nmid ca\\) iff \\(d \\nmid c\\) and \\(d \\nmid a\\). The sufficiency is obvious and if \\(d \\nmid ca\\) then \\(ca=dq+r\\) where \\(0&lt;r&lt;d\\). The case \\(d \\nmid c\\) leads to \\(ca=dq\\), which is contradict to our previous condition.</p> <p>Since \\((ca_1,...,ca_n)=d'\\), \\(d' \\mid ca_j\\) for \\(1 \\leq j \\leq n\\). If \\(d' \\mid c\\), \\(d' \\mid cd\\) instantly. Otherwise \\(d' \\mid a_j\\) thus \\(d' \\leq d \\leq cd\\). Hence \\(d=d'\\).</p>"},{"location":"NumberTheory/primary_number_theory_pt3/#the-euclidean-algorithm","title":"The Euclidean Algorithm","text":"<p>Lemma 1 If \\(a\\) and \\(b\\) are two integers and \\(a=bq+r\\) where also \\(q\\) and \\(r\\) are integers, then \\((a,b)=(r,b)\\).</p> <p>Proof \\((a,b)=(bq+r,b)=(b,r)\\) by Thm 8 instantly.</p> <p>Thm 10 Let \\(a=r_0\\) and \\(b=r_1\\) be two positive integers where \\(a \\geq b\\). If we apply the division algorithm successively to obtain that</p> \\[ r_j=r_{j+1}q_{j+1}+r_{j+2}, 0 \\leq r_{j+2}&lt;r_{j+1} \\] <p>for all \\(j=0,1,...,n-2\\) and</p> \\[ r_{n+1}=0 \\] <p>Then \\((a,b)=r_n\\).</p> <p>Proof By Lemma 1, \\((a,b)=(r_0,r_1)=(r_1q_1+r_2,r_1)=(r_1,r_2)=...=(r_n,r_{n+1})=(r_n,0)=r_n\\).</p>"},{"location":"NumberTheory/primary_number_theory_pt3/#exercises_1","title":"Exercises","text":"<p>Exercises</p> <ul> <li>Let \\(a\\) and \\(b\\) be two positive integers where \\(a\\) is even and \\(b\\) is odd. Prove that \\((a,b)=(a/2,b)\\).</li> </ul> <p>Proof Suppose \\((a,b)=d\\) and \\((a/2,b)=d'\\). \\(d\\) is odd since \\(b\\) has no even divisors. Assume that \\(a=kd\\) then \\(k\\) is even. Thus \\(\\frac{a}{2}=\\frac{k}{2}d\\) and \\(d \\mid \\frac{a}{2}\\). Since \\(d'\\) is the greatest common divisor of \\((a/2,b)\\) so \\(d \\leq d'\\).</p> <p>Similarly, \\(d' \\mid \\frac{a}{2}\\) thus \\(d' \\leq d\\). Hence \\(d=d'\\).</p>"},{"location":"NumberTheory/primary_number_theory_pt3/#lames-theorem","title":"Lame's Theorem","text":""},{"location":"NumberTheory/primary_number_theory_pt3/#fibonacci-sequence","title":"Fibonacci Sequence","text":"<p>Def 7 The Fibonacci sequence is defined recursively by \\(f_1=1, f_2=1\\), and</p> \\[ f_n=f_{n-1}+f_{n-2}, n \\geq 3 \\] <p>The terms in the sequence are called Fibonacci numbers.</p> <p>In the following lemma, we give a lower bound on the growth of Fibonacci numbers.</p> <p>Lemma 2 For \\(n \\geq 3\\), we have \\(f_n&gt;\\alpha^{n-2}\\) where \\(\\alpha=(1+\\sqrt{5})/2\\).</p> <p>Proof We use the second principle of mathematical induction to prove our result. It is easy to see that this is true for \\(n=3\\) and \\(n=4\\). Assume that \\(\\alpha^{k-2}&lt;f_k\\) for all integers \\(k\\) where \\(k \\leq n\\). Now since \\(\\alpha\\) is a solution of the polynomial \\(x^{2}-x-1=0\\), we have \\(\\alpha^2=\\alpha+1\\). Hence</p> \\[ \\alpha^{n-1}=\\alpha^{2}\\alpha^{n-3}=(\\alpha+1)\\alpha^{n-3}=\\alpha^{n-2}+\\alpha^{n-3} \\] <p>By the inductive hypothesis, we have</p> \\[ \\alpha^{n-2}&lt;f_n, \\alpha^{n-3}&lt;{f_n-1} \\] <p>After adding the two inequalities, we get</p> \\[ \\alpha^{n-1}&lt;f_n+f_{n-1}=f_{n+1}. \\]"},{"location":"NumberTheory/primary_number_theory_pt3/#lames-theorem_1","title":"Lame's Theorem","text":"<p>Thm 11 Using the Euclidean algorithm to find the greatest common divisor of two positive integers has number of divisions less than or equal to five times the number of decimal digits in the minimum of the two integers.</p> <p>Proof Let \\(a\\) and \\(b\\) be two positive integers where \\(a&gt;b\\). Applying the Euclidean algorithm to find the greatest common divisor of two integers with \\(a=r_0\\) and \\(b=r_1\\), we get</p> \\[ r_0=r_1q_1+r_2 \\] \\[ r_1=r_2q_2+r_3 \\] \\[ \\cdot \\] \\[ \\cdot \\] \\[ \\cdot \\] \\[ r_{n-2}=r_{n-1}q_{n-1}+r_{n} \\] \\[ r_{n-1}=r_nq_n. \\] <p>Notice that \\(q_1,...,q_{n-1} \\geq 1\\) and \\(q_{n} \\geq 2\\). Thus we have</p> \\[ r_n \\geq 1=f_2 \\] \\[ r_{n-1} \\geq 2r_n \\geq 2f_2=f_3 \\] \\[ \\cdot \\] \\[ \\cdot \\] \\[ \\cdot \\] \\[ r_2 \\geq r_3+r_4 \\geq f_{n-1}+f_{n-2}=f_n \\] \\[ b=r_1 \\geq r_2+r_3 \\geq f_n+f_{n-1}=f_{n+1}. \\] <p>By Lemma 2, we have \\(f_{n+1}&gt;\\alpha^{n-1}\\) for \\(n&gt;2\\). As a result, we have \\(b&gt;\\alpha^{n-1}\\). Now notice since</p> \\[ \\log_{10}{\\alpha}&gt;\\frac{1}{5} \\] <p>we get</p> \\[ \\log_{10}b&gt;(n-1)/5. \\] <p>Thus we have</p> \\[ n-1&lt;5\\log_{10}b. \\] <p>Now let \\(b\\) has \\(k\\) decimal digits thus \\(\\log_{10}b&lt;k\\). Hence \\(n \\leq 5k\\).</p>"},{"location":"NumberTheory/primary_number_theory_pt3/#exercises_2","title":"Exercises","text":"<p>Exercises</p> <ol> <li>Find an upper bound for the number of steps in the Euclidean algorithm that is used to find the greatest common divisor of \\(38472\\) and \\(957748838\\).</li> </ol> <p>Sol By Lame's Theorem, the number of steps of Euclidean algorithm has a upper bound \\(\\lfloor5\\log_{10}38472\\rfloor=22\\).</p>"},{"location":"NumberTheory/primary_number_theory_pt4/","title":"Fantastic Prime Numbers","text":""},{"location":"NumberTheory/primary_number_theory_pt4/#the-sieve-of-eratosthenes","title":"The Sieve of Eratosthenes","text":"<p>Def 8 A prime is an integer greater than \\(1\\) that is only divisible by \\(1\\) and itself.</p> <p>Lemma 3 Every integer greater than \\(1\\) has a prime divisor.</p> <p>Proof For an integer \\(n\\) greater than \\(1\\), if \\(n\\) is prime, it then has a prime divisor as itself by definition. If n is not prime, assume \\(d_1 \\mid n, 2 \\leq d_1&lt;n\\). If \\(d_1\\) is prime, the Lemma is proved, otherwise assume \\(d_2 \\mid d_1\\) and repeat the procedure. Since the sequence \\(d_j\\) has least bound \\(2\\) is a prime, thus \\(n\\) must have a prime divisor.</p> <p>Thm 12 If \\(n\\) is a composite integer, then \\(n\\) has a prime factor not exceeding \\(\\sqrt{n}\\).</p> <p>Proof Since \\(n\\) is composite, then \\(n=ab\\) for some integers \\(1&lt;a \\leq b&lt;n\\). Obviously, \\(a \\leq \\sqrt{n} \\leq b\\). By Lemma 3, \\(a\\) must have a prime divisor \\(d \\leq \\sqrt{n}\\) and \\(d\\) is also a divisor of \\(n\\).</p>"},{"location":"NumberTheory/primary_number_theory_pt4/#exercises","title":"Exercises","text":"<ul> <li> <p>Show that no integer of the form \\(a^3+1\\) is a prime except \\(2=1^3+1\\).</p> </li> <li> <p>Show that if 2^n-1 is prime, then n is prime.</p> </li> </ul> <p>Hint: \\((a^{kl}-1)=(a^k-1)(1+a^k+...+(a^k)^{l-1})\\)</p>"},{"location":"NumberTheory/primary_number_theory_pt4/#the-infinitude-of-primes","title":"The infinitude of Primes","text":"<p>Thm 13 There are infinitely many primes.</p> <p>Proof Suppose there are finitely many primes \\(p_1,p_2,p_3,...,p_n\\) where \\(p_1 \\leq p_2 \\leq p_3 \\leq ... \\leq p_n\\). Set an positive integer \\(Q=p_1p_2...p_n+1\\). Obviously, \\(Q&gt;p_n\\). Now we prove that \\(Q\\) is a prime.</p> <p>By Lemma 3, every integer greater than one has a prime divisor, now we assume it is \\(p_i\\). \\(Q\\) can be written as</p> \\[ Q=(q_1q_2...q_{i-1}q_{i+1}...q_n)q_i+1 \\] <p>hence \\(q_i \\nmid Q\\), which means \\(Q\\) does not have a prime divisor less than \\(Q\\), thus \\(Q\\) is a prime.</p> <p>Question Denote \\(\\mathbb{P}\\) is the set of all primes. Is the proposal true that \\(|\\mathbb{P}|=\\alef_0\\)?</p> <p>Answer In fact, every infinite subset \\(A\\) of \\(\\mathbb{N}\\) has cardinality \\(\\aleph_0\\).</p> <p>We can define a bijection:</p> \\[ f : A \\subset \\mathbb{N} \\rightarrow \\mathbb{N} \\] \\[ f(a)=|\\{n \\in A : n&lt;a\\}| \\] <p>Firstly, we prove that \\(f\\) is an injection. By well-ordering principle, set \\(A\\) has a least element \\(m\\), hence \\(f(a)=|\\{n \\in A : n&lt;a\\}|=a-m\\). It is obvious that \\(f\\) is an injection. Then now we prove that \\(f\\) is also a surjection. For any element k in \\mathbb{N}, we can find an element k+m in</p>"},{"location":"Physics/mistake/","title":"A Mistake Dealing With A Free Particle In Spherical Co-ordinates.","text":"<p>Consider a free particle in flat space \\(\\mathbb{{R}}^3\\). The Lagrangian \\(L\\) is</p> \\[L=\\frac{m}{2}(\\dot{x}^2+\\dot{y}^2+\\dot{z}^2)\\] <p>in Cartesian coordinates and</p> \\[L=\\frac{m}{2}(\\dot{r}^2+r^2\\dot{\\theta}^2+r^2\\sin^2\\theta\\dot{\\phi}^2)\\] <p>in spherical coordinates.</p> <p>When I try to write the E-L equations of the spherical form, I have</p> \\[\\ddot{r}=r\\dot{\\theta}^2+r\\sin^2\\theta\\dot{\\phi}^2\\] <p>using</p> \\[\\frac{\\partial L}{\\partial r}-\\frac{d}{dt}(\\frac{\\partial L}{\\partial \\dot{r}})=0\\] <p>and</p> \\[\\frac{d}{dt}(mr^2\\dot{\\theta})=mr^2\\dot{\\phi}\\sin\\theta\\cos\\theta\\] \\[\\ddot{\\theta}=\\sin\\theta\\cos\\theta\\dot{\\phi}^2\\] <p>using</p> \\[\\frac{\\partial L}{\\partial \\theta}-\\frac{d}{dt}(\\frac{\\partial L}{\\partial \\dot{\\theta}})=0\\] <p>But on the other hand, if we use multiplication rule of derivative, we can get</p> \\[\\frac{d}{dt}(r^2\\dot{\\theta})=\\dot{\\theta}\\frac{d}{dt}r^2+r^2\\frac{d}{dt}\\dot{\\theta}=2r\\dot{r}\\dot{\\theta}+r^2\\ddot{\\theta}\\] <p>So what happened?</p> <p>The mistake occurs at the formula \\(\\ddot{\\theta}=\\sin\\theta\\cos\\theta\\dot{\\phi}^2\\), that's because I didn't consider \\(r\\) as a variable of \\(t\\) and just divided it. The only authentic formula is</p> \\[\\frac{d}{dt}(r^2\\dot{\\theta})=r^2\\dot{\\phi}\\sin\\theta\\cos\\theta\\]"}]}